// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())
  name            String
  email           String @unique
  emailVerified   DateTime?
  image           String?
  password        String
  sessions        Session[]
  projects        Project[] @relation("UserProjects")
  tasks           Task[]     @relation("AssignedTasks")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id                      String @id @default(uuid())
  ownerId                 String
  owner                   User @relation("UserProjects", fields: [ownerId], references: [id])
  name                    String
  imageId                 String
  imageThumbUrl           String
  imageFullUrl            String
  imageUserName           String
  imageLinkHTML           String

  lists                   List[]

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model List {
  id                      String @id @default(uuid())
  title                   String
  textColor               String?
  backgroundColor         String?
  order                   Int

  projectId               String
  project                 Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  cards                   Task[]

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@index([projectId])
}

model Task {
  id                      String @id @default(uuid())
  title                   String
  order                   Int
  description             String?
  assigneeId              String?
  assignee                User? @relation("AssignedTasks", fields: [assigneeId], references: [id])

  listId                  String
  list                    List @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@index([listId])
}

// model Membership {
//   id        String   @id @default(uuid())
//   userId    String
//   projectId String

//   user      User     @relation(fields: [userId], references: [id])
//   project   Project  @relation(fields: [projectId], references: [id])

//   @@unique([userId, projectId])
//   createdAt DateTime @default(now())
// }